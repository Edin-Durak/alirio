---
import { Image } from "astro:assets";
import { getLangFromUrl, getTranslations } from '../i18n/ui';
import ukFlag from "../assets/images/icons/Flag_of_the_United_Kingdom.svg";
import swedenFlag from "../assets/images/icons/Flag-Sweden.svg";
import bosniaFlag from "../assets/images/icons/Flag_of_Bosnia_and_Herzegovina.svg";
import saudiFlag from "../assets/images/icons/Flag_of_Saudi_Arabia.svg";

const lang = getLangFromUrl(Astro.url);
const { content } = getTranslations(lang);

const languages = [
  { code: 'sv', name: 'Sweden', native: 'Sweden', flag: swedenFlag },
  { code: 'en', name: 'English', native: 'English', flag: ukFlag },
  { code: 'bs', name: 'Bosanski', native: 'Bosanski', flag: bosniaFlag },
  { code: 'ar', name: 'العربية', native: 'العربية', flag: saudiFlag }
];

// Route mapping for all languages
const routeMappings = {
  en: { home: '', services: 'services', pricing: 'pricing', about: 'about' },
  bs: { home: '', services: 'usluge', pricing: 'cijene', about: 'o-nama' },
  sv: { home: '', services: 'tjanster', pricing: 'priser', about: 'om-oss' },
  ar: { home: '', services: 'خدمات', pricing: 'الأسعار', about: 'حول' },
};
---

<div class="language-dropdown">
  <button class="language-dropdown__trigger" aria-expanded="false" aria-haspopup="true">
    {(() => {
      const currentLanguage = languages.find(l => l.code === lang);
      return currentLanguage ? (
        <Image src={currentLanguage.flag} alt={`${currentLanguage.name} flag`} width={25} height={20} />
      ) : null;
    })()}
    <span class="language-dropdown__current">{lang.toUpperCase()}</span>
    <svg class="language-dropdown__arrow" width="12" height="8" viewBox="0 0 12 8" fill="none">
      <path d="M1 1L6 6L11 1" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
  </button>
  
  <ul class="language-dropdown__menu" role="menu">
    {languages.map((language) => (
      <li class="language-dropdown__item" role="none">
        <button 
          class={`language-dropdown__option ${language.code === lang ? 'language-dropdown__option--active' : ''}`}
          data-lang={language.code}
          role="menuitem"
        >
          <Image src={language.flag} alt={`${language.name} flag`} width={25} height={20} />
          <span class="language-dropdown__name">{language.native}</span>
        </button>
      </li>
    ))}
  </ul>
</div>

<script define:vars={{ routeMappings }}>
  /**
   * @typedef {Object} LanguageDropdown
   * @property {HTMLElement} dropdown
   * @property {HTMLButtonElement} trigger
   * @property {HTMLElement} menu
   * @property {NodeList} options
   */
  
  class LanguageDropdown {
    /**
     * @type {HTMLElement}
     */
    dropdown;
    
    /**
     * @type {HTMLButtonElement}
     */
    trigger;
    
    /**
     * @type {HTMLElement}
     */
    menu;
    
    /**
     * @type {NodeList}
     */
    options;
    
    constructor(element) {
      this.dropdown = element;
      this.trigger = element.querySelector('.language-dropdown__trigger');
      this.menu = element.querySelector('.language-dropdown__menu');
      this.options = element.querySelectorAll('.language-dropdown__option');
      
      this.init();
    }
    
    init() {
      this.trigger.addEventListener('click', () => this.toggle());
      this.options.forEach(option => {
        option.addEventListener('click', (e) => this.selectLanguage(e));
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', (e) => {
        if (!this.dropdown.contains(e.target)) {
          this.close();
        }
      });
      
      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          this.close();
        }
      });
    }
    
    toggle() {
      const isExpanded = this.trigger.getAttribute('aria-expanded') === 'true';
      if (isExpanded) {
        this.close();
      } else {
        this.open();
      }
    }
    
    open() {
      this.trigger.setAttribute('aria-expanded', 'true');
      this.menu.classList.add('language-dropdown__menu--open');
      this.trigger.classList.add('language-dropdown__trigger--open');
    }
    
    close() {
      this.trigger.setAttribute('aria-expanded', 'false');
      this.menu.classList.remove('language-dropdown__menu--open');
      this.trigger.classList.remove('language-dropdown__trigger--open');
    }
    
    selectLanguage(event) {
      const option = event.currentTarget;
      const langCode = option.dataset.lang;
      
      // Close dropdown
      this.close();
      
      // Get current path
      const currentPath = window.location.pathname;
      const pathSegments = currentPath.split('/').filter(segment => segment);
      
      let targetPath = '';
      
      // Check if current path has a language prefix (Swedish is default, so no prefix)
      const supportedLanguages = ['en', 'bs', 'ar', 'ku', 'sy'];
      const hasLanguagePrefix = pathSegments.length > 0 && supportedLanguages.includes(pathSegments[0]);
      
      if (hasLanguagePrefix) {
        // Current path has language prefix (e.g., /bs/usluge)
        const currentLang = pathSegments[0];
        const currentRoute = pathSegments.slice(1).join('/');
        
        // Find the page type by matching current route
        const currentLangRoutes = routeMappings[currentLang];
        let pageType = 'home';
        
        for (const [type, route] of Object.entries(currentLangRoutes)) {
          if (currentRoute === route || (route === '' && currentRoute === '')) {
            pageType = type;
            break;
          }
        }
        
        // Get translated route for target language
        const targetLangRoutes = routeMappings[langCode];
        const targetRoute = targetLangRoutes[pageType];
        
        // Build target URL - Swedish is default (no prefix), others need language prefix
        if (langCode === 'sv') {
          targetPath = '/' + targetRoute + (targetRoute !== '' ? '/' : '');
          // Handle root path for Swedish
          if (targetRoute === '') {
            targetPath = '/';
          }
        } else {
          targetPath = `/${langCode}/${targetRoute}/`;
        }
      } else {
        // Current path has no language prefix (e.g., /services)
        const currentRoute = pathSegments.join('/');
        
        // Find the page type by matching current route (Swedish is default)
        const currentLangRoutes = routeMappings['sv'];
        let pageType = 'home';
        
        for (const [type, route] of Object.entries(currentLangRoutes)) {
          if (currentRoute === route || (route === '' && currentRoute === '')) {
            pageType = type;
            break;
          }
        }
        
        // Get translated route for target language
        const targetLangRoutes = routeMappings[langCode];
        const targetRoute = targetLangRoutes[pageType];
        
        // Build target URL - Swedish is default (no prefix), others need language prefix
        if (langCode === 'sv') {
          targetPath = '/' + targetRoute + (targetRoute !== '' ? '/' : '');
          // Handle root path for Swedish
          if (targetRoute === '') {
            targetPath = '/';
          }
        } else {
          targetPath = `/${langCode}/${targetRoute}/`;
        }
      }
      
      // Navigate to the target page
      window.location.href = targetPath;
    }
  }
  
  // Initialize all language dropdowns
  document.addEventListener('DOMContentLoaded', () => {
    const dropdowns = document.querySelectorAll('.language-dropdown');
    dropdowns.forEach(dropdown => new LanguageDropdown(dropdown));
  });
</script> 
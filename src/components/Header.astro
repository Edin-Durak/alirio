---
import "../styles/main.scss";
import { Image } from "astro:assets";
import logoImage from "../assets/images/alirio-logo.svg";
import arrowRightIcon from "../assets/images/icons/arrow-right-icon.svg";
import hamburgerIcon from "../assets/images/icons/hamburger-icon.svg";
import phoneIcon from "../assets/images/icons/phone-icon.svg";
import LanguageDropdown from "./LanguageDropdown.astro";
import { getRelativeLocaleUrl } from 'astro:i18n';
import { getTranslations, getLangFromUrl } from '../i18n/ui';

const lang = getLangFromUrl(Astro.url);
const { ui, content } = getTranslations(lang);

// Define navigation structure
const navItems = [
  { key: 'nav.home', route: content.routes.home },
  { key: 'nav.services', route: content.routes.services },
  { key: 'nav.about', route: content.routes.about }
];

// Generate URLs for current language
const navLinks = navItems.map(item => ({
  ...item,
  href: getRelativeLocaleUrl(lang, item.route),
  text: ui[item.key]
}));

// Logo link
const logoHref = getRelativeLocaleUrl(lang, '');

// Helper function to check if a link is active
const isLinkActive = (linkHref: string) => {
  const currentPath = Astro.url.pathname;
  const linkPath = new URL(linkHref, Astro.url).pathname;
  
  // Handle root path specially
  if (linkPath === '/' || linkPath === `/${lang}/`) {
    return currentPath === '/' || currentPath === `/${lang}/`;
  }
  
  // For other paths, check if current path starts with link path
  return currentPath.startsWith(linkPath);
};
---

<header class="header">
  <div class="header__container">
    <a href={logoHref} class="header__logo-link">
      <Image src={logoImage} alt="Logo image" width={80} height={80} class="header__logo-image" loading="eager" />
    </a>
    
    <nav class="header__nav">
      <ul class="header__nav-list">
        {navLinks.map(link => (
          <li class="header__nav-item">
            <a href={link.href} class={`header__nav-link ${isLinkActive(link.href) ? 'header__nav-link--active' : ''}`}>
              {link.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>
    
    <div class="header__actions">
      <div class="header__languages">
        <LanguageDropdown />
      </div>
      <button class="header__mobile-toggle" aria-label="Toggle mobile menu" aria-expanded="false">
        <Image src={hamburgerIcon} alt="Menu" width={24} height={24} loading="eager" />
      </button>
      <a href="tel:+46793483298" class="header__phone-link">
        <span class="header__phone-link-text">{ui['nav.phone']}</span>
        
        <span class="header__phone-link-icon desktop">
          <Image src={arrowRightIcon} alt="Arrow right" width={20} height={20} loading="eager" />
        </span>
        <span class="header__phone-link-icon mobile">
          <Image src={phoneIcon} alt="Phone" width={20} height={20} loading="eager" />
        </span>
      </a>
    </div>
  </div>
  
  <!-- Mobile Navigation Overlay -->
  <div class="header__mobile-nav" aria-hidden="true">
    <div class="header__mobile-nav-content">
      <div class="header__mobile-nav-header">
        <button class="header__mobile-close" aria-label="Close mobile menu">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
      </div>
      
      <nav class="header__mobile-nav-menu">
        <ul class="header__mobile-nav-list">
          {navLinks.map(link => (
            <li class="header__mobile-nav-item">
              <a href={link.href} class={`header__mobile-nav-link ${isLinkActive(link.href) ? 'header__mobile-nav-link--active' : ''}`}>
                {link.text}
              </a>
            </li>
          ))}
        </ul>
      </nav>
    </div>
  </div>
</header>

<script>
  /**
   * @typedef {Object} MobileNavigation
   * @property {HTMLElement} header
   * @property {HTMLButtonElement} toggle
   * @property {HTMLButtonElement} closeBtn
   * @property {HTMLElement} mobileNav
   */
  
  class MobileNavigation {
    /**
     * @type {HTMLElement}
     */
    header;
    
    /**
     * @type {HTMLButtonElement}
     */
    toggle;
    
    /**
     * @type {HTMLButtonElement}
     */
    closeBtn;
    
    /**
     * @type {HTMLElement}
     */
    mobileNav;
    
    constructor() {
      this.header = document.querySelector('.header');
      this.toggle = this.header?.querySelector('.header__mobile-toggle');
      this.closeBtn = this.header?.querySelector('.header__mobile-close');
      this.mobileNav = this.header?.querySelector('.header__mobile-nav');
      
      this.init();
    }
    
    init() {
      if (!this.toggle || !this.closeBtn || !this.mobileNav) return;
      
      this.toggle.addEventListener('click', () => this.open());
      this.closeBtn.addEventListener('click', () => this.close());
      
      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          this.close();
        }
      });
      
      // Close on overlay click
      this.mobileNav.addEventListener('click', (e) => {
        if (e.target === this.mobileNav) {
          this.close();
        }
      });
      
      // Close on link click
      const mobileLinks = this.mobileNav?.querySelectorAll('.header__mobile-nav-link');
      mobileLinks?.forEach(link => {
        link.addEventListener('click', () => this.close());
      });
    }
    
    open() {
      this.toggle.setAttribute('aria-expanded', 'true');
      this.mobileNav.setAttribute('aria-hidden', 'false');
      this.mobileNav.classList.add('header__mobile-nav--open');
      document.body.style.overflow = 'hidden';
    }
    
    close() {
      this.toggle.setAttribute('aria-expanded', 'false');
      this.mobileNav.setAttribute('aria-hidden', 'true');
      this.mobileNav.classList.remove('header__mobile-nav--open');
      document.body.style.overflow = '';
    }
  }
  
  // Initialize mobile navigation
  function initializeMobileNav() {
    // Only initialize if not already initialized
    if (!document.querySelector('.header[data-mobile-nav-initialized]')) {
      new MobileNavigation();
      
      // Mark as initialized
      const header = document.querySelector('.header');
      if (header) {
        header.setAttribute('data-mobile-nav-initialized', 'true');
      }
    }
    
    // Add scroll effect to header (always run this)
    const header = document.querySelector('.header');
    if (header) {
      window.addEventListener('scroll', () => {
        if (window.scrollY > 10) {
          header.classList.add('header--scrolled');
        } else {
          header.classList.remove('header--scrolled');
        }
      });
    }
  }
  
  // Initialize on DOM ready
  document.addEventListener('DOMContentLoaded', initializeMobileNav);
  
  // Initialize on page load (for view transitions)
  document.addEventListener('astro:page-load', initializeMobileNav);
</script>

